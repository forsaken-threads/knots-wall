{"version":3,"sources":["rss-widget.js","text-snippet.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["Vue.component('rss-widget', {\n    data: function() {\n        return {\n            rss: {\n                entries: [],\n                meta: {\n                    title: 'RSS Widget',\n                    update: 'never'\n                }\n            }\n        };\n    },\n    filters: {\n        date: function(d, dateOnly) {\n            d = new Date(d);\n            if (dateOnly != undefined) {\n                return d.toLocaleDateString();\n            }\n            return d.toLocaleDateString() + ' ' + d.toLocaleTimeString();\n        }\n    },\n    methods: {\n        loadRss: function(result) {\n            if (result.error) {\n                console.log(result.error);\n            } else {\n                console.log(result.feed.entries);\n                this.rss = result.feed;\n            }\n        },\n        scroll: function(direction) {\n            this.start = this.start + (this.limit * direction);\n        }\n    },\n    props: {\n        limit: {\n            default: function () {\n                return 5;\n            }\n        },\n        start: {\n            default: function() {\n                return 0;\n            }\n        },\n        url: null\n    },\n    ready: function() {\n        feednami.load(this.url, this.loadRss);\n    },\n    template: require('../pre/rss-widget.html')\n});","Vue.component('text-snippet', {\n    beforeCompile: function() {\n        this.fullText = this.fullText.replace(/(<([^>]+)>)/ig,\"\");\n    },\n    data: function() {\n        return { max: 150 };\n    },\n    filters: {\n        snippet: function (value) {\n            return value.substr(0, this.max).match(/.+\\s/);\n        }\n    },\n    methods: {\n        fits: function() {\n            return this.fullText.length < this.max;\n        }\n    },\n    props: ['full-text'],\n    template: require('../pre/text-snippet.html')\n});"],"sourceRoot":"/source/"}